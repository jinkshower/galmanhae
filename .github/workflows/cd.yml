name: cd

on:
  push:
    branches:
      - main
      - cicd/**

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 리포지토리를 checkout합니다.
        uses: actions/checkout@v4

      - name: 자바를 설치합니다.
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: "corretto"

      - name: Gradle을 캐싱합니다.
        uses: actions/cache@v3
        with:
          path: |
            .gradle/caches
            .gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: Docker Buildx를 설치합니다.
        uses: docker/setup-buildx-action@v2

      - name: 실행권한을 부여합니다.
        run: chmod +x gradlew

      - name: 환경파일을 만듭니다.
        run: |
          touch ./src/main/resources/application-prod.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ./src/main/resources/application-prod.yml
          cat ./src/main/resources/application-prod.yml

      - name: 프로젝트를 빌드합니다.
        run: ./gradlew bootJar

      - name: Docker Hub에 로그인합니다.
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_EMAIL }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Dockerfile을 빌드하고 이미지를 Docker Hub에 푸시합니다.
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/galmanhae:latest

      - name: 배포합니다.
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PUBLIC_IP }}
          username: ${{ secrets.HOST_USERNAME }}
          port: ${{ secrets.WAS_SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo docker stop galmanhae || true
            sudo docker rm galmanhae || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/galmanhae:latest
            sudo docker run -d --network host --name galmanhae -v /home/${{ secrets.HOST_USERNAME }}/log:/log ${{ secrets.DOCKER_USERNAME }}/galmanhae:latest
            sudo docker image prune -f
